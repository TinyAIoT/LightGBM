#define USE_HARD_CODE 0
#ifndef USE_HARD_CODE

#else
#include "gbdt.h"
#include <LightGBM/utils/common.h>
#include <LightGBM/objective_function.h>
#include <LightGBM/metric.h>
#include <LightGBM/prediction_early_stop.h>
#include <ctime>
#include <sstream>
#include <chrono>
#include <string>
#include <vector>
#include <utility>
namespace LightGBM {
double PredictTree0(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3086.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return -0.1695769863198896; } else { return -0.096447517602441343; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3021.5000000000005) {return 0.11774026465126873; } else { return 0.035204649129478321; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3196.5000000000005) {fval = arr[6];if (std::isnan(fval)) fval = 0.0;if (fval <= 5372.5000000000009) {return -0.050664485561792899; } else { return 0.098759465552489517; } } else { fval = arr[43];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.13974954986888727; } else { return -0.037417902871774891; } } } }
double PredictTree0ByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3086.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return -0.1695769863198896; } else { return -0.096447517602441343; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3021.5000000000005) {return 0.11774026465126873; } else { return 0.035204649129478321; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3196.5000000000005) {fval = arr.count(6) > 0 ? arr.at(6) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 5372.5000000000009) {return -0.050664485561792899; } else { return 0.098759465552489517; } } else { fval = arr.count(43) > 0 ? arr.at(43) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.13974954986888727; } else { return -0.037417902871774891; } } } }

double PredictTree1(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3089.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2451.5000000000005) {return -0.1724099123220012; } else { return -0.093364814291061859; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3011.5000000000005) {return 0.086881975390416422; } else { return 0.014955142343247378; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3211.5000000000005) {fval = arr[46];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.076703090703611809; } else { return 0.038296306339576508; } } else { fval = arr[43];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.15297408516649572; } else { return -0.047676383329018412; } } } }
double PredictTree1ByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3089.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2451.5000000000005) {return -0.1724099123220012; } else { return -0.093364814291061859; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3011.5000000000005) {return 0.086881975390416422; } else { return 0.014955142343247378; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3211.5000000000005) {fval = arr.count(46) > 0 ? arr.at(46) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.076703090703611809; } else { return 0.038296306339576508; } } else { fval = arr.count(43) > 0 ? arr.at(43) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.15297408516649572; } else { return -0.047676383329018412; } } } }

double PredictTree2(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3073.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return -0.1611028014479528; } else { return -0.096919483897517783; } } else { fval = arr[37];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0.077049432568821061; } else { return -0.018671143888258156; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3194.5000000000005) {fval = arr[8];if (std::isnan(fval)) fval = 0.0;if (fval <= 240.50000000000003) {return -0.065945551865359095; } else { return 0.030369171608524398; } } else { fval = arr[43];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.13442381999666209; } else { return -0.050418111660279818; } } } }
double PredictTree2ByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3073.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return -0.1611028014479528; } else { return -0.096919483897517783; } } else { fval = arr.count(37) > 0 ? arr.at(37) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0.077049432568821061; } else { return -0.018671143888258156; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3194.5000000000005) {fval = arr.count(8) > 0 ? arr.at(8) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 240.50000000000003) {return -0.065945551865359095; } else { return 0.030369171608524398; } } else { fval = arr.count(43) > 0 ? arr.at(43) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.13442381999666209; } else { return -0.050418111660279818; } } } }

double PredictTree3(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3101.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return -0.15019439291768863; } else { return -0.088400955638152645; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3034.5000000000005) {return 0.069613724267976726; } else { return -0.0066245857382898586; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3296.5000000000005) {fval = arr[4];if (std::isnan(fval)) fval = 0.0;if (fval <= 211.00000000000003) {return -0.10546869104279984; } else { return -0.039849001372391335; } } else { fval = arr[41];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.15370745894518803; } else { return 0.17068433064792154; } } } }
double PredictTree3ByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3101.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return -0.15019439291768863; } else { return -0.088400955638152645; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3034.5000000000005) {return 0.069613724267976726; } else { return -0.0066245857382898586; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3296.5000000000005) {fval = arr.count(4) > 0 ? arr.at(4) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 211.00000000000003) {return -0.10546869104279984; } else { return -0.039849001372391335; } } else { fval = arr.count(41) > 0 ? arr.at(41) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.15370745894518803; } else { return 0.17068433064792154; } } } }

double PredictTree4(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3122.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {fval = arr[45];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.13734998683818397; } else { return 0.25309806380768701; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3034.5000000000005) {return 0.062498850728185798; } else { return -0.0097982149477425316; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3296.5000000000005) {fval = arr[6];if (std::isnan(fval)) fval = 0.0;if (fval <= 5076.5000000000009) {return -0.080353982571219257; } else { return 0.01010332246749639; } } else { fval = arr[41];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.14385568707588317; } else { return 0.14898245530271895; } } } }
double PredictTree4ByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3122.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {fval = arr.count(45) > 0 ? arr.at(45) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.13734998683818397; } else { return 0.25309806380768701; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3034.5000000000005) {return 0.062498850728185798; } else { return -0.0097982149477425316; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3296.5000000000005) {fval = arr.count(6) > 0 ? arr.at(6) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 5076.5000000000009) {return -0.080353982571219257; } else { return 0.01010332246749639; } } else { fval = arr.count(41) > 0 ? arr.at(41) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.14385568707588317; } else { return 0.14898245530271895; } } } }

double PredictTree5(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3145.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return -0.13412396000405979; } else { return -0.075949503412128971; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3004.5000000000005) {return 0.061648787288636021; } else { return -0.0031555881489309812; } } } else { fval = arr[6];if (std::isnan(fval)) fval = 0.0;if (fval <= 5161.5000000000009) {fval = arr[46];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.10570703371805852; } else { return -0.035796335531455989; } } else { fval = arr[10];if (std::isnan(fval)) fval = 0.0;if (fval <= 1192.5000000000002) {return -0.10456365698233328; } else { return 0.070601495505479187; } } } }
double PredictTree5ByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3145.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return -0.13412396000405979; } else { return -0.075949503412128971; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3004.5000000000005) {return 0.061648787288636021; } else { return -0.0031555881489309812; } } } else { fval = arr.count(6) > 0 ? arr.at(6) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 5161.5000000000009) {fval = arr.count(46) > 0 ? arr.at(46) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.10570703371805852; } else { return -0.035796335531455989; } } else { fval = arr.count(10) > 0 ? arr.at(10) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1192.5000000000002) {return -0.10456365698233328; } else { return 0.070601495505479187; } } } }

double PredictTree6(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3070.5000000000005) {fval = arr[14];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {fval = arr[16];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0.050967796770668629; } else { return -0.23479742274144988; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {return -0.12528412195927496; } else { return -0.029395957149105447; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3292.5000000000005) {fval = arr[46];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.057476959674596907; } else { return 0.04086396855681533; } } else { fval = arr[41];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.12921611637358274; } else { return 0.14478419284984964; } } } }
double PredictTree6ByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3070.5000000000005) {fval = arr.count(14) > 0 ? arr.at(14) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {fval = arr.count(16) > 0 ? arr.at(16) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0.050967796770668629; } else { return -0.23479742274144988; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {return -0.12528412195927496; } else { return -0.029395957149105447; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3292.5000000000005) {fval = arr.count(46) > 0 ? arr.at(46) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.057476959674596907; } else { return 0.04086396855681533; } } else { fval = arr.count(41) > 0 ? arr.at(41) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.12921611637358274; } else { return 0.14478419284984964; } } } }

double PredictTree7(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3158.5000000000005) {fval = arr[14];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {fval = arr[37];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0.042152437243835772; } else { return -0.050102200217204018; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {return -0.11954676535990161; } else { return -0.026385803953116224; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3308.5000000000005) {fval = arr[8];if (std::isnan(fval)) fval = 0.0;if (fval <= 234.50000000000003) {return -0.084967943233597951; } else { return -0.021097006566624499; } } else { fval = arr[41];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.12995866855563815; } else { return 0.12872727322070684; } } } }
double PredictTree7ByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3158.5000000000005) {fval = arr.count(14) > 0 ? arr.at(14) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {fval = arr.count(37) > 0 ? arr.at(37) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0.042152437243835772; } else { return -0.050102200217204018; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {return -0.11954676535990161; } else { return -0.026385803953116224; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3308.5000000000005) {fval = arr.count(8) > 0 ? arr.at(8) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 234.50000000000003) {return -0.084967943233597951; } else { return -0.021097006566624499; } } else { fval = arr.count(41) > 0 ? arr.at(41) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return -0.12995866855563815; } else { return 0.12872727322070684; } } } }

double (*PredictTreePtr[])(const double*) = { PredictTree0 , PredictTree1 , PredictTree2 , PredictTree3 , PredictTree4 , PredictTree5 , PredictTree6 , PredictTree7 };

void GBDT::PredictRaw(const double* features, double *output, const PredictionEarlyStopInstance* early_stop) const {
	int early_stop_round_counter = 0;
	std::memset(output, 0, sizeof(double) * num_tree_per_iteration_);
	for (int i = 0; i < num_iteration_for_pred_; ++i) {
		for (int k = 0; k < num_tree_per_iteration_; ++k) {
			output[k] += (*PredictTreePtr[i * num_tree_per_iteration_ + k])(features);
		}
		++early_stop_round_counter;
		if (early_stop->round_period == early_stop_round_counter) {
			if (early_stop->callback_function(output, num_tree_per_iteration_))
				return;
			early_stop_round_counter = 0;
		}
	}
}

double (*PredictTreeByMapPtr[])(const std::unordered_map<int, double>&) = { PredictTree0ByMap , PredictTree1ByMap , PredictTree2ByMap , PredictTree3ByMap , PredictTree4ByMap , PredictTree5ByMap , PredictTree6ByMap , PredictTree7ByMap };

void GBDT::PredictRawByMap(const std::unordered_map<int, double>& features, double* output, const PredictionEarlyStopInstance* early_stop) const {
	int early_stop_round_counter = 0;
	std::memset(output, 0, sizeof(double) * num_tree_per_iteration_);
	for (int i = 0; i < num_iteration_for_pred_; ++i) {
		for (int k = 0; k < num_tree_per_iteration_; ++k) {
			output[k] += (*PredictTreeByMapPtr[i * num_tree_per_iteration_ + k])(features);
		}
		++early_stop_round_counter;
		if (early_stop->round_period == early_stop_round_counter) {
			if (early_stop->callback_function(output, num_tree_per_iteration_))
				return;
			early_stop_round_counter = 0;
		}
	}
}

void GBDT::Predict(const double* features, double *output, const PredictionEarlyStopInstance* early_stop) const {
	PredictRaw(features, output, early_stop);
	if (average_output_) {
		for (int k = 0; k < num_tree_per_iteration_; ++k) {
			output[k] /= num_iteration_for_pred_;
		}
	}
	if (objective_function_ != nullptr) {
		objective_function_->ConvertOutput(output, output);
	}
}

void GBDT::PredictByMap(const std::unordered_map<int, double>& features, double* output, const PredictionEarlyStopInstance* early_stop) const {
	PredictRawByMap(features, output, early_stop);
	if (average_output_) {
		for (int k = 0; k < num_tree_per_iteration_; ++k) {
			output[k] /= num_iteration_for_pred_;
		}
	}
	if (objective_function_ != nullptr) {
		objective_function_->ConvertOutput(output, output);
	}
}

double PredictTree0Leaf(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3086.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return 0; } else { return 7; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3021.5000000000005) {return 2; } else { return 4; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3196.5000000000005) {fval = arr[6];if (std::isnan(fval)) fval = 0.0;if (fval <= 5372.5000000000009) {return 1; } else { return 5; } } else { fval = arr[43];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 3; } else { return 6; } } } }
double PredictTree0LeafByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3086.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return 0; } else { return 7; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3021.5000000000005) {return 2; } else { return 4; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3196.5000000000005) {fval = arr.count(6) > 0 ? arr.at(6) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 5372.5000000000009) {return 1; } else { return 5; } } else { fval = arr.count(43) > 0 ? arr.at(43) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 3; } else { return 6; } } } }

double PredictTree1Leaf(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3089.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2451.5000000000005) {return 0; } else { return 7; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3011.5000000000005) {return 2; } else { return 3; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3211.5000000000005) {fval = arr[46];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 1; } else { return 5; } } else { fval = arr[43];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 6; } } } }
double PredictTree1LeafByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3089.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2451.5000000000005) {return 0; } else { return 7; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3011.5000000000005) {return 2; } else { return 3; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3211.5000000000005) {fval = arr.count(46) > 0 ? arr.at(46) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 1; } else { return 5; } } else { fval = arr.count(43) > 0 ? arr.at(43) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 6; } } } }

double PredictTree2Leaf(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3073.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return 0; } else { return 7; } } else { fval = arr[37];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 2; } else { return 4; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3194.5000000000005) {fval = arr[8];if (std::isnan(fval)) fval = 0.0;if (fval <= 240.50000000000003) {return 1; } else { return 5; } } else { fval = arr[43];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 3; } else { return 6; } } } }
double PredictTree2LeafByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3073.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return 0; } else { return 7; } } else { fval = arr.count(37) > 0 ? arr.at(37) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 2; } else { return 4; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3194.5000000000005) {fval = arr.count(8) > 0 ? arr.at(8) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 240.50000000000003) {return 1; } else { return 5; } } else { fval = arr.count(43) > 0 ? arr.at(43) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 3; } else { return 6; } } } }

double PredictTree3Leaf(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3101.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return 0; } else { return 6; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3034.5000000000005) {return 2; } else { return 3; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3296.5000000000005) {fval = arr[4];if (std::isnan(fval)) fval = 0.0;if (fval <= 211.00000000000003) {return 1; } else { return 5; } } else { fval = arr[41];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 7; } } } }
double PredictTree3LeafByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3101.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return 0; } else { return 6; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3034.5000000000005) {return 2; } else { return 3; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3296.5000000000005) {fval = arr.count(4) > 0 ? arr.at(4) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 211.00000000000003) {return 1; } else { return 5; } } else { fval = arr.count(41) > 0 ? arr.at(41) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 7; } } } }

double PredictTree4Leaf(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3122.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {fval = arr[45];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0; } else { return 7; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3034.5000000000005) {return 2; } else { return 3; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3296.5000000000005) {fval = arr[6];if (std::isnan(fval)) fval = 0.0;if (fval <= 5076.5000000000009) {return 1; } else { return 5; } } else { fval = arr[41];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 6; } } } }
double PredictTree4LeafByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3122.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {fval = arr.count(45) > 0 ? arr.at(45) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0; } else { return 7; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3034.5000000000005) {return 2; } else { return 3; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3296.5000000000005) {fval = arr.count(6) > 0 ? arr.at(6) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 5076.5000000000009) {return 1; } else { return 5; } } else { fval = arr.count(41) > 0 ? arr.at(41) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 6; } } } }

double PredictTree5Leaf(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3145.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return 0; } else { return 7; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3004.5000000000005) {return 2; } else { return 3; } } } else { fval = arr[6];if (std::isnan(fval)) fval = 0.0;if (fval <= 5161.5000000000009) {fval = arr[46];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 1; } else { return 6; } } else { fval = arr[10];if (std::isnan(fval)) fval = 0.0;if (fval <= 1192.5000000000002) {return 4; } else { return 5; } } } }
double PredictTree5LeafByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3145.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2497.5000000000005) {fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2429.5000000000005) {return 0; } else { return 7; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3004.5000000000005) {return 2; } else { return 3; } } } else { fval = arr.count(6) > 0 ? arr.at(6) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 5161.5000000000009) {fval = arr.count(46) > 0 ? arr.at(46) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 1; } else { return 6; } } else { fval = arr.count(10) > 0 ? arr.at(10) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1192.5000000000002) {return 4; } else { return 5; } } } }

double PredictTree6Leaf(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3070.5000000000005) {fval = arr[14];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {fval = arr[16];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0; } else { return 3; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {return 2; } else { return 6; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3292.5000000000005) {fval = arr[46];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 1; } else { return 5; } } else { fval = arr[41];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 7; } } } }
double PredictTree6LeafByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3070.5000000000005) {fval = arr.count(14) > 0 ? arr.at(14) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {fval = arr.count(16) > 0 ? arr.at(16) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0; } else { return 3; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {return 2; } else { return 6; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3292.5000000000005) {fval = arr.count(46) > 0 ? arr.at(46) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 1; } else { return 5; } } else { fval = arr.count(41) > 0 ? arr.at(41) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 7; } } } }

double PredictTree7Leaf(const double* arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3158.5000000000005) {fval = arr[14];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {fval = arr[37];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0; } else { return 3; } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {return 2; } else { return 6; } } } else { fval = arr[1];if (std::isnan(fval)) fval = 0.0;if (fval <= 3308.5000000000005) {fval = arr[8];if (std::isnan(fval)) fval = 0.0;if (fval <= 234.50000000000003) {return 1; } else { return 5; } } else { fval = arr[41];if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 7; } } } }
double PredictTree7LeafByMap(const std::unordered_map<int, double>& arr) { const std::vector<uint32_t> cat_threshold = {};double fval = 0.0f; fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3158.5000000000005) {fval = arr.count(14) > 0 ? arr.at(14) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {fval = arr.count(37) > 0 ? arr.at(37) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 0; } else { return 3; } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 2473.5000000000005) {return 2; } else { return 6; } } } else { fval = arr.count(1) > 0 ? arr.at(1) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 3308.5000000000005) {fval = arr.count(8) > 0 ? arr.at(8) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 234.50000000000003) {return 1; } else { return 5; } } else { fval = arr.count(41) > 0 ? arr.at(41) : 0.0f;if (std::isnan(fval)) fval = 0.0;if (fval <= 1.0000000180025095e-35) {return 4; } else { return 7; } } } }

double (*PredictTreeLeafPtr[])(const double*) = { PredictTree0Leaf , PredictTree1Leaf , PredictTree2Leaf , PredictTree3Leaf , PredictTree4Leaf , PredictTree5Leaf , PredictTree6Leaf , PredictTree7Leaf };

void GBDT::PredictLeafIndex(const double* features, double *output) const {
	int total_tree = num_iteration_for_pred_ * num_tree_per_iteration_;
	for (int i = 0; i < total_tree; ++i) {
		output[i] = (*PredictTreeLeafPtr[i])(features);
	}
}
double (*PredictTreeLeafByMapPtr[])(const std::unordered_map<int, double>&) = { PredictTree0LeafByMap , PredictTree1LeafByMap , PredictTree2LeafByMap , PredictTree3LeafByMap , PredictTree4LeafByMap , PredictTree5LeafByMap , PredictTree6LeafByMap , PredictTree7LeafByMap };

void GBDT::PredictLeafIndexByMap(const std::unordered_map<int, double>& features, double* output) const {
	int total_tree = num_iteration_for_pred_ * num_tree_per_iteration_;
	for (int i = 0; i < total_tree; ++i) {
		output[i] = (*PredictTreeLeafByMapPtr[i])(features);
	}
}
}  // namespace LightGBM
#endif
